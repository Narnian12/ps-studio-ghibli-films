{"version":3,"sources":["Components/Header.tsx","Components/Home.tsx","Components/GhibliFilms.tsx","Components/GhibliPeople.tsx","Components/GhibliLocations.tsx","Components/GhibliSpeciesList.tsx","Components/GhibliVehicles.tsx","Components/GhibliAPIs.tsx","App.tsx","index.tsx"],"names":["Header","HeaderWrapper","Typography","variant","styled","div","Home","setNumPages","useEffect","HomeText","GhibliFilms","ghibliFilms","setGhibliFilms","currPage","useState","displayedFilms","setDisplayedFilms","fetch","then","response","json","films","length","slice","Math","ceil","ListWrapper","Grid","columns","container","spacing","item","xs","GridItemStyle","map","elem","Fragment","title","description","director","release_date","running_time","rt_score","id","GhibliPeople","ghibliPeople","setGhibliPeople","displayedPeople","setDisplayedPeople","people","name","gender","age","eye_color","hair_color","GhibliLocations","ghibliLocations","setGhibliLocations","displayedLocations","setDisplayedLocations","locations","climate","terrain","surface_water","GhibliSpeciesList","ghibliSpecies","setGhibliSpecies","species","classification","eye_colors","hair_colors","GhibliVehicles","ghibliVehicles","setGhibliVehicles","vehicles","vehicle_class","GhibliAPIs","numPages","setCurrPage","GhibliAPIsWrapper","LinkStyle","to","Button","GhibliListsWrapper","path","Footer","Pagination","count","color","onChange","event","page","preventDefault","Link","App","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a82ba4ec.chunk.js","sourcesContent":["import { FC } from 'react';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const Header: FC = () => {\n  return (\n    <HeaderWrapper>\n      <Typography variant=\"h4\">Studio Ghibli World</Typography>\n    </HeaderWrapper>\n  );\n};\n\nconst HeaderWrapper = styled.div`\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  top: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  background-color: lightgray;\n`;\n","import { FC, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { HomeInterface } from '../Interfaces/ghibli-interface';\n\nexport const Home: FC<HomeInterface> = ({ setNumPages }) => {\n  useEffect(() => {\n    setNumPages(0);\n  }, [setNumPages]);\n\n  return (\n    <HomeText>\n      Welcome to the Studio Ghibli World! Take a look around :)\n    </HomeText>\n  );\n};\n\nconst HomeText = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  margin-top: -100px;\n  margin-left: -200px;\n`;\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n  GhibliFilm,\n  GhibliFilmsInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliFilms: FC<GhibliFilmsInterface> = ({\n  ghibliFilms,\n  setGhibliFilms,\n  setNumPages,\n  currPage,\n}) => {\n  const [displayedFilms, setDisplayedFilms] = useState<GhibliFilm[]>([]);\n\n  // Initialize data and first set of displayedFilms\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/films')\n      .then((response) => response.json())\n      .then((films: [GhibliFilm]) => {\n        setGhibliFilms(films);\n        setDisplayedFilms(films.length / 5 >= 1 ? films.slice(0, 5) : films);\n      });\n  }, [setGhibliFilms]);\n\n  // Deduce how many pages there should be\n  useEffect(() => {\n    setNumPages(Math.ceil(ghibliFilms.length / 5));\n  }, [setNumPages, ghibliFilms]);\n\n  // Update displayedFilms based on page\n  useEffect(() => {\n    setDisplayedFilms(ghibliFilms.slice(currPage * 5 - 5, currPage * 5));\n  }, [currPage, ghibliFilms]);\n\n  return (\n    <ListWrapper>\n      <Grid columns={12} container spacing={1}>\n        <Grid item xs={2}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Title</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={5}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Description</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={2}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Director</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Date</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Time</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Score</Typography>\n          </GridItemStyle>\n        </Grid>\n        {displayedFilms?.map((elem: GhibliFilm) => (\n          <React.Fragment key={elem.id}>\n            <Grid item xs={2}>\n              <GridItemStyle>\n                <Typography>{elem.title}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={5}>\n              <GridItemStyle>\n                <Typography>{elem.description}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={2}>\n              <GridItemStyle>\n                <Typography>{elem.director}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.release_date}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.running_time}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.rt_score}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </React.Fragment>\n        ))}\n      </Grid>\n    </ListWrapper>\n  );\n};\n\nconst ListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n  GhibliPerson,\n  GhibliPeopleInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliPeople: FC<GhibliPeopleInterface> = ({\n  ghibliPeople,\n  setGhibliPeople,\n  setNumPages,\n  currPage,\n}) => {\n  const [displayedPeople, setDisplayedPeople] = useState<GhibliPerson[]>([]);\n\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/people')\n      .then((response) => response.json())\n      .then((people: [GhibliPerson]) => {\n        setGhibliPeople(people);\n        setDisplayedPeople(\n          people.length / 5 >= 1 ? people.slice(0, 5) : people\n        );\n      });\n  }, [setGhibliPeople]);\n\n  useEffect(() => {\n    setNumPages(Math.ceil(ghibliPeople.length / 5));\n  }, [setNumPages, ghibliPeople]);\n\n  useEffect(() => {\n    setDisplayedPeople(ghibliPeople.slice(currPage * 5 - 5, currPage * 5));\n  }, [currPage, ghibliPeople]);\n\n  return (\n    <ListWrapper>\n      <Grid columns={5} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Gender</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Age</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Eye Color</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Hair Color</Typography>\n          </GridItemStyle>\n        </Grid>\n        {displayedPeople?.map((elem: GhibliPerson) => (\n          <React.Fragment key={elem.id}>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.gender}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.age}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.eye_color}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.hair_color}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </React.Fragment>\n        ))}\n      </Grid>\n    </ListWrapper>\n  );\n};\n\nconst ListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n  GhibliLocation,\n  GhibliLocationsInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliLocations: FC<GhibliLocationsInterface> = ({\n  ghibliLocations,\n  setGhibliLocations,\n  setNumPages,\n  currPage,\n}) => {\n  const [displayedLocations, setDisplayedLocations] = useState<\n    GhibliLocation[]\n  >([]);\n\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/locations')\n      .then((response) => response.json())\n      .then((locations: [GhibliLocation]) => {\n        setGhibliLocations(locations);\n        setDisplayedLocations(\n          locations.length / 5 >= 1 ? locations.slice(0, 5) : locations\n        );\n      });\n  }, [setGhibliLocations]);\n\n  useEffect(() => {\n    setNumPages(Math.ceil(ghibliLocations.length / 5));\n  }, [setNumPages, ghibliLocations]);\n\n  useEffect(() => {\n    setDisplayedLocations(\n      ghibliLocations.slice(currPage * 5 - 5, currPage * 5)\n    );\n  }, [currPage, ghibliLocations]);\n\n  return (\n    <ListWrapper>\n      <Grid columns={4} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Climate</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Terrain</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Surface Water</Typography>\n          </GridItemStyle>\n        </Grid>\n        {displayedLocations?.map((elem: GhibliLocation) => (\n          <React.Fragment key={elem.id}>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.climate}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.terrain}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.surface_water}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </React.Fragment>\n        ))}\n      </Grid>\n    </ListWrapper>\n  );\n};\n\nconst ListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import React, { FC, useEffect } from 'react';\nimport {\n  GhibliSpecies,\n  GhibliSpeciesInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliSpeciesList: FC<GhibliSpeciesInterface> = ({\n  ghibliSpecies,\n  setGhibliSpecies,\n  setNumPages,\n}) => {\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/species')\n      .then((response) => response.json())\n      .then((species: [GhibliSpecies]) => {\n        setGhibliSpecies(species);\n        setNumPages(1);\n      });\n  }, [setGhibliSpecies, setNumPages]);\n\n  return (\n    <ListWrapper>\n      <Grid columns={4} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Classification</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Eye Colors</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Hair Colors</Typography>\n          </GridItemStyle>\n        </Grid>\n        {ghibliSpecies?.map((elem: GhibliSpecies) => (\n          <React.Fragment key={elem.id}>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.classification}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.eye_colors}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.hair_colors}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </React.Fragment>\n        ))}\n      </Grid>\n    </ListWrapper>\n  );\n};\n\nconst ListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import React, { FC, useEffect } from 'react';\nimport {\n  GhibliVehicle,\n  GhibliVehiclesInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliVehicles: FC<GhibliVehiclesInterface> = ({\n  ghibliVehicles,\n  setGhibliVehicles,\n  setNumPages,\n}) => {\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/vehicles')\n      .then((response) => response.json())\n      .then((vehicles: [GhibliVehicle]) => {\n        setGhibliVehicles(vehicles);\n        setNumPages(1);\n      });\n  }, [setGhibliVehicles, setNumPages]);\n\n  return (\n    <ListWrapper>\n      <Grid columns={5} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={2}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Description</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Class</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Length</Typography>\n          </GridItemStyle>\n        </Grid>\n        {ghibliVehicles?.map((elem: GhibliVehicle) => (\n          <React.Fragment key={elem.id}>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={2}>\n              <GridItemStyle>\n                <Typography>{elem.description}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.vehicle_class}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1}>\n              <GridItemStyle>\n                <Typography>{elem.length}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </React.Fragment>\n        ))}\n      </Grid>\n    </ListWrapper>\n  );\n};\n\nconst ListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import React, { FC, useState } from 'react';\nimport {\n  GhibliFilm,\n  GhibliPerson,\n  GhibliLocation,\n  GhibliSpecies,\n  GhibliVehicle,\n} from '../Interfaces/ghibli-interface';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport Pagination from '@mui/material/Pagination';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\nimport { Home } from './Home';\nimport { GhibliFilms } from './GhibliFilms';\nimport { GhibliPeople } from './GhibliPeople';\nimport { GhibliLocations } from './GhibliLocations';\nimport { GhibliSpeciesList } from './GhibliSpeciesList';\nimport { GhibliVehicles } from './GhibliVehicles';\n\nexport const GhibliAPIs: FC = () => {\n  // Give the option of undefined so we don't need to populate an empty AnimeListInterface\n  const [ghibliFilms, setGhibliFilms] = useState<GhibliFilm[]>([]);\n  const [ghibliPeople, setGhibliPeople] = useState<GhibliPerson[]>([]);\n  const [ghibliLocations, setGhibliLocations] = useState<GhibliLocation[]>([]);\n  const [ghibliSpecies, setGhibliSpecies] = useState<GhibliSpecies[]>([]);\n  const [ghibliVehicles, setGhibliVehicles] = useState<GhibliVehicle[]>([]);\n  const [numPages, setNumPages] = useState(0);\n  const [currPage, setCurrPage] = useState(1);\n\n  const pageChanged = (event: React.ChangeEvent<unknown>, page: number) => {\n    event.preventDefault();\n    return setCurrPage(page);\n  };\n\n  return (\n    <>\n      <Router>\n        <GhibliAPIsWrapper>\n          <LinkStyle to=\"/ps-studio-ghibli-films\">\n            <Button variant=\"contained\">\n              <Typography>Home</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/ps-studio-ghibli-films/films\">\n            <Button variant=\"contained\">\n              <Typography>Films</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/ps-studio-ghibli-films/people\">\n            <Button variant=\"contained\">\n              <Typography>People</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/ps-studio-ghibli-films/locations\">\n            <Button variant=\"contained\">\n              <Typography>Locations</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/ps-studio-ghibli-films/species\">\n            <Button variant=\"contained\">\n              <Typography>Species</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/ps-studio-ghibli-films/vehicles\">\n            <Button variant=\"contained\">\n              <Typography>Vehicles</Typography>\n            </Button>\n          </LinkStyle>\n        </GhibliAPIsWrapper>\n        <GhibliListsWrapper>\n          <Switch>\n            <Route path=\"/ps-studio-ghibli-films/films\">\n              <GhibliFilms\n                ghibliFilms={ghibliFilms}\n                setGhibliFilms={setGhibliFilms}\n                setNumPages={setNumPages}\n                currPage={currPage}\n              />\n            </Route>\n            <Route path=\"/ps-studio-ghibli-films/people\">\n              <GhibliPeople\n                ghibliPeople={ghibliPeople}\n                setGhibliPeople={setGhibliPeople}\n                setNumPages={setNumPages}\n                currPage={currPage}\n              />\n            </Route>\n            <Route path=\"/ps-studio-ghibli-films/locations\">\n              <GhibliLocations\n                ghibliLocations={ghibliLocations}\n                setGhibliLocations={setGhibliLocations}\n                setNumPages={setNumPages}\n                currPage={currPage}\n              />\n            </Route>\n            <Route path=\"/ps-studio-ghibli-films/species\">\n              <GhibliSpeciesList\n                ghibliSpecies={ghibliSpecies}\n                setGhibliSpecies={setGhibliSpecies}\n                setNumPages={setNumPages}\n                currPage={currPage}\n              />\n            </Route>\n            <Route path=\"/ps-studio-ghibli-films/vehicles\">\n              <GhibliVehicles\n                ghibliVehicles={ghibliVehicles}\n                setGhibliVehicles={setGhibliVehicles}\n                setNumPages={setNumPages}\n                currPage={currPage}\n              />\n            </Route>\n            <Route path=\"/ps-studio-ghibli-films/\">\n              <Home setNumPages={setNumPages} />\n            </Route>\n          </Switch>\n        </GhibliListsWrapper>\n      </Router>\n      <Footer>\n        <Pagination count={numPages} color=\"primary\" onChange={pageChanged} />\n      </Footer>\n    </>\n  );\n};\n\nconst GhibliAPIsWrapper = styled.div`\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  top: 0;\n  margin: 40px 0px 0px 0px;\n  display: flex;\n  justify-content: space-around;\n  background-color: lightgray;\n  padding: 5px;\n`;\n\nconst LinkStyle = styled(Link)`\n  text-decoration: none;\n`;\n\nconst GhibliListsWrapper = styled.div`\n  margin: 0px 0px 40px 0px;\n`;\n\nconst Footer = styled.div`\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  background-color: lightgray;\n  padding: 5px;\n`;\n","import { FC } from 'react';\nimport { Header } from './Components/Header';\nimport { GhibliAPIs } from './Components/GhibliAPIs';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nconst App: FC = () => {\n  return (\n    <>\n      <Header />\n      <GhibliAPIs />;\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}