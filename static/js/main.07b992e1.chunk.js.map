{"version":3,"sources":["Components/Header.tsx","Components/GhibliFilms.tsx","Components/GhibliPeople.tsx","Components/GhibliLocations.tsx","Components/GhibliSpeciesList.tsx","Components/GhibliVehicles.tsx","Components/GhibliAPIs.tsx","App.tsx","index.tsx"],"names":["Header","HeaderWrapper","Typography","variant","styled","div","GhibliFilms","ghibliFilms","setGhibliFilms","useEffect","fetch","then","response","json","films","AnimeListWrapper","Grid","columns","container","spacing","item","xs","GridItemStyle","map","elem","title","id","description","director","release_date","running_time","rt_score","GhibliPeople","ghibliPeople","setGhibliPeople","people","name","gender","age","eye_color","hair_color","GhibliLocations","ghibliLocations","setGhibliLocations","locations","climate","terrain","surface_water","GhibliSpeciesList","ghibliSpecies","setGhibliSpecies","species","classification","eye_colors","hair_colors","GhibliVehicles","ghibliVehicles","setGhibliVehicles","vehicles","vehicle_class","length","GhibliAPIs","useState","GhibliAPIsWrapper","LinkStyle","to","Button","GhibliListsWrapper","path","Footer","Pagination","count","color","Link","App","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07b992e1.chunk.js","sourcesContent":["import { FC } from 'react';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const Header: FC = () => {\n  return (\n    <HeaderWrapper>\n      <Typography variant=\"h4\">Studio Ghibli World</Typography>\n    </HeaderWrapper>\n  );\n};\n\nconst HeaderWrapper = styled.div`\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  top: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  background-color: lightgray;\n`;\n","import { FC, useEffect } from 'react';\nimport {\n  GhibliFilm,\n  GhibliFilmsInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliFilms: FC<GhibliFilmsInterface> = ({\n  ghibliFilms,\n  setGhibliFilms,\n}) => {\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/films')\n      .then((response) => response.json())\n      .then((films: [GhibliFilm]) => setGhibliFilms(films));\n  }, [setGhibliFilms]);\n\n  return (\n    <AnimeListWrapper>\n      <Grid columns={12} container spacing={1}>\n        <Grid item xs={2}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Title</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={5}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Description</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={2}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Director</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Date</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Time</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Score</Typography>\n          </GridItemStyle>\n        </Grid>\n        {ghibliFilms?.map((elem: GhibliFilm) => (\n          <>\n            <Grid item xs={2} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.title}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={5} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.description}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={2} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.director}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.release_date}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.running_time}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.rt_score}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </>\n        ))}\n      </Grid>\n    </AnimeListWrapper>\n  );\n};\n\nconst AnimeListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FC, useEffect } from 'react';\nimport {\n  GhibliPerson,\n  GhibliPeopleInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliPeople: FC<GhibliPeopleInterface> = ({\n  ghibliPeople,\n  setGhibliPeople,\n}) => {\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/people')\n      .then((response) => response.json())\n      .then((people: [GhibliPerson]) => setGhibliPeople(people));\n  }, [setGhibliPeople]);\n\n  return (\n    <AnimeListWrapper>\n      <Grid columns={5} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Gender</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Age</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Eye Color</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Hair Color</Typography>\n          </GridItemStyle>\n        </Grid>\n        {ghibliPeople?.map((elem: GhibliPerson) => (\n          <>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.gender}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.age}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.eye_color}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.hair_color}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </>\n        ))}\n      </Grid>\n    </AnimeListWrapper>\n  );\n};\n\nconst AnimeListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FC, useEffect } from 'react';\nimport {\n  GhibliLocation,\n  GhibliLocationsInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliLocations: FC<GhibliLocationsInterface> = ({\n  ghibliLocations,\n  setGhibliLocations,\n}) => {\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/locations')\n      .then((response) => response.json())\n      .then((locations: [GhibliLocation]) => setGhibliLocations(locations));\n  }, [setGhibliLocations]);\n\n  return (\n    <AnimeListWrapper>\n      <Grid columns={4} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Climate</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Terrain</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Surface Water</Typography>\n          </GridItemStyle>\n        </Grid>\n        {ghibliLocations?.map((elem: GhibliLocation) => (\n          <>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.climate}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.terrain}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.surface_water}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </>\n        ))}\n      </Grid>\n    </AnimeListWrapper>\n  );\n};\n\nconst AnimeListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FC, useEffect } from 'react';\nimport {\n  GhibliSpecies,\n  GhibliSpeciesInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliSpeciesList: FC<GhibliSpeciesInterface> = ({\n  ghibliSpecies,\n  setGhibliSpecies,\n}) => {\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/species')\n      .then((response) => response.json())\n      .then((species: [GhibliSpecies]) => setGhibliSpecies(species));\n  }, [setGhibliSpecies]);\n\n  return (\n    <AnimeListWrapper>\n      <Grid columns={4} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Classification</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Eye Colors</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Hair Colors</Typography>\n          </GridItemStyle>\n        </Grid>\n        {ghibliSpecies?.map((elem: GhibliSpecies) => (\n          <>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.classification}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.eye_colors}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.hair_colors}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </>\n        ))}\n      </Grid>\n    </AnimeListWrapper>\n  );\n};\n\nconst AnimeListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FC, useEffect } from 'react';\nimport {\n  GhibliVehicle,\n  GhibliVehiclesInterface,\n} from '../Interfaces/ghibli-interface';\nimport Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\n\nexport const GhibliVehicles: FC<GhibliVehiclesInterface> = ({\n  ghibliVehicles,\n  setGhibliVehicles,\n}) => {\n  useEffect(() => {\n    fetch('https://ghibliapi.herokuapp.com/vehicles')\n      .then((response) => response.json())\n      .then((vehicles: [GhibliVehicle]) => setGhibliVehicles(vehicles));\n  }, [setGhibliVehicles]);\n\n  return (\n    <AnimeListWrapper>\n      <Grid columns={5} container spacing={1}>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Name</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={2}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Description</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Class</Typography>\n          </GridItemStyle>\n        </Grid>\n        <Grid item xs={1}>\n          <GridItemStyle>\n            <Typography variant=\"h6\">Length</Typography>\n          </GridItemStyle>\n        </Grid>\n        {ghibliVehicles?.map((elem: GhibliVehicle) => (\n          <>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.name}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={2} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.description}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.vehicle_class}</Typography>\n              </GridItemStyle>\n            </Grid>\n            <Grid item xs={1} key={elem.id}>\n              <GridItemStyle>\n                <Typography>{elem.length}</Typography>\n              </GridItemStyle>\n            </Grid>\n          </>\n        ))}\n      </Grid>\n    </AnimeListWrapper>\n  );\n};\n\nconst AnimeListWrapper = styled.div`\n  margin: 80px 0px 0px 0px;\n`;\n\nconst GridItemStyle = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FC, useState } from 'react';\nimport {\n  GhibliFilm,\n  GhibliPerson,\n  GhibliLocation,\n  GhibliSpecies,\n  GhibliVehicle,\n} from '../Interfaces/ghibli-interface';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport Pagination from '@mui/material/Pagination';\nimport styled from 'styled-components';\nimport Typography from '@mui/material/Typography';\nimport { GhibliFilms } from './GhibliFilms';\nimport { GhibliPeople } from './GhibliPeople';\nimport { GhibliLocations } from './GhibliLocations';\nimport { GhibliSpeciesList } from './GhibliSpeciesList';\nimport { GhibliVehicles } from './GhibliVehicles';\n\nexport const GhibliAPIs: FC = () => {\n  // Give the option of undefined so we don't need to populate an empty AnimeListInterface\n  const [ghibliFilms, setGhibliFilms] = useState<GhibliFilm[]>([]);\n  const [ghibliPeople, setGhibliPeople] = useState<GhibliPerson[]>([]);\n  const [ghibliLocations, setGhibliLocations] = useState<GhibliLocation[]>([]);\n  const [ghibliSpecies, setGhibliSpecies] = useState<GhibliSpecies[]>([]);\n  const [ghibliVehicles, setGhibliVehicles] = useState<GhibliVehicle[]>([]);\n\n  return (\n    <>\n      <Router>\n        <GhibliAPIsWrapper>\n          <LinkStyle to=\"/\">\n            <Button variant=\"contained\">\n              <Typography>Home</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/films\">\n            <Button variant=\"contained\">\n              <Typography>Films</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/people\">\n            <Button variant=\"contained\">\n              <Typography>People</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/locations\">\n            <Button variant=\"contained\">\n              <Typography>Locations</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/species\">\n            <Button variant=\"contained\">\n              <Typography>Species</Typography>\n            </Button>\n          </LinkStyle>\n          <LinkStyle to=\"/vehicles\">\n            <Button variant=\"contained\">\n              <Typography>Vehicles</Typography>\n            </Button>\n          </LinkStyle>\n        </GhibliAPIsWrapper>\n        <GhibliListsWrapper>\n          <Switch>\n            <Route path=\"/films\">\n              <GhibliFilms\n                ghibliFilms={ghibliFilms}\n                setGhibliFilms={setGhibliFilms}\n              />\n            </Route>\n            <Route path=\"/people\">\n              <GhibliPeople\n                ghibliPeople={ghibliPeople}\n                setGhibliPeople={setGhibliPeople}\n              />\n            </Route>\n            <Route path=\"/locations\">\n              <GhibliLocations\n                ghibliLocations={ghibliLocations}\n                setGhibliLocations={setGhibliLocations}\n              />\n            </Route>\n            <Route path=\"/species\">\n              <GhibliSpeciesList\n                ghibliSpecies={ghibliSpecies}\n                setGhibliSpecies={setGhibliSpecies}\n              />\n            </Route>\n            <Route path=\"/vehicles\">\n              <GhibliVehicles\n                ghibliVehicles={ghibliVehicles}\n                setGhibliVehicles={setGhibliVehicles}\n              />\n            </Route>\n          </Switch>\n        </GhibliListsWrapper>\n      </Router>\n      <Footer>\n        <Pagination count={10} color=\"primary\" />\n      </Footer>\n    </>\n  );\n};\n\nconst GhibliAPIsWrapper = styled.div`\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  top: 0;\n  margin: 40px 0px 0px 0px;\n  display: flex;\n  justify-content: space-around;\n  background-color: lightgray;\n  padding: 5px;\n`;\n\nconst LinkStyle = styled(Link)`\n  text-decoration: none;\n`;\n\nconst GhibliListsWrapper = styled.div`\n  margin: 0px 0px 40px 0px;\n`;\n\nconst Footer = styled.div`\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  background-color: lightgray;\n  padding: 5px;\n`;\n","import { FC } from 'react';\nimport { Header } from './Components/Header';\nimport { GhibliAPIs } from './Components/GhibliAPIs';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nconst App: FC = () => {\n  return (\n    <>\n      <Header />\n      <GhibliAPIs />;\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}